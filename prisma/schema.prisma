generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

// generator erd {
//   provider = "prisma-erd-generator"
// }

model Admin {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityProvider {
  id             Int                               @id @default(autoincrement())
  firstName      String
  lastName       String
  businessName   String
  email          String                            @unique
  password       String                            @db.Text
  website        String
  phoneNumber    String
  approvalStatus ACTIVITY_PROVIDER_APPROVAL_STATUS @default(PENDING)
  createdAt      DateTime                          @default(now())
  updatedAt      DateTime                          @updatedAt
  Activity       Activity[]
}

model Parent {
  id             Int              @id @default(autoincrement())
  fullName       String
  profilePicture String?          @db.Text
  email          String           @unique
  password       String
  phoneNumber    String?
  address        String?          @db.Text
  city           String?
  state          String?
  zipCode        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Child          Child[]
  Order          Order[]
  ActivityReview ActivityReview[]
}

model Child {
  id             Int              @id @default(autoincrement())
  parentId       Int
  fullName       String
  birthDay       DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  parent         Parent           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  OrderAttendees OrderAttendees[]
}

model Activity {
  id                 Int               @id @default(autoincrement())
  category           ACTIVITY_CATEGORY
  activityProviderId Int
  thumbnailPicture   String?           @db.Text
  title              String
  description        String            @db.Text
  capacity           Int
  ageRangeStart      Int
  ageRangeEnd        Int
  activityStartDate  DateTime
  activityEndDate    DateTime
  activityStartTime  DateTime          @db.Time()
  activityEndTime    DateTime          @db.Time()
  formattedAddress   String            @db.Text
  lat                Float?
  lng                Float?
  isFullCourse       Boolean           @default(false)
  isSingleSession    Boolean           @default(false)
  fullCoursePrice    Float?
  singleSessionPrice Float?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  provider           ActivityProvider  @relation(fields: [activityProviderId], references: [id], onDelete: Cascade)
  ActivityReview     ActivityReview[]
  OrderDetail        OrderDetail[]
}

model ActivityReview {
  id           Int      @id @default(autoincrement())
  activityId   Int
  parentId     Int
  rating       Int
  loved        String   @db.Text
  improvements String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  activity     Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  parent       Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Order {
  id             Int           @id @default(autoincrement())
  parentId       Int
  proofOfPayment String?
  isApproved     ORDER_STATUS  @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  parent         Parent        @relation(fields: [parentId], references: [id], onDelete: Cascade)
  OrderDetail    OrderDetail[]
}

model OrderDetail {
  id                Int                 @id @default(autoincrement())
  orderId           Int
  activityId        Int
  bookingType       BOOKING_TYPE
  totalPrice        Int
  hasGivenReview    Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  order             Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  activity          Activity            @relation(fields: [activityId], references: [id], onDelete: Cascade)
  SingleSessionDate SingleSessionDate[]
  OrderAttendees    OrderAttendees[]
}

model OrderAttendees {
  id            Int         @id @default(autoincrement())
  orderDetailId Int
  childId       Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id], onDelete: Cascade)
  child         Child       @relation(fields: [childId], references: [id], onDelete: Cascade)
}

model SingleSessionDate {
  id            Int         @id @default(autoincrement())
  orderDetailId Int
  sessionDate   DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id], onDelete: Cascade)
}

enum ACTIVITY_PROVIDER_APPROVAL_STATUS {
  PENDING
  APPROVED
  REJECTED
}

enum ACTIVITY_CATEGORY {
  MUSIC
  ART
  COOKING
  ROBOTS
  LANGUAGE
  SPORTS
}

enum BOOKING_TYPE {
  FULL_COURSE
  SINGLE_SESSION
}

enum ORDER_STATUS {
  PENDING
  APPROVE
  REJECT
}
